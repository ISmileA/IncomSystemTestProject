
IncomSystemTestProjectF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002580  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800268c  0800268c  0000368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c8  080026c8  0000411c  2**0
                  CONTENTS
  4 .ARM          00000000  080026c8  080026c8  0000411c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026c8  080026c8  0000411c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000036c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080026cc  080026cc  000036cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000011c  20000000  080026d0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000047c  2000011c  080027ec  0000411c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  080027ec  00004598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000411c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007dd9  00000000  00000000  00004145  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a4e  00000000  00000000  0000bf1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000718  00000000  00000000  0000d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055e  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165a8  00000000  00000000  0000e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009aea  00000000  00000000  00024b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e86f  00000000  00000000  0002e678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000acee7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ac0  00000000  00000000  000acf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000ae9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000011c 	.word	0x2000011c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002674 	.word	0x08002674

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000120 	.word	0x20000120
 8000148:	08002674 	.word	0x08002674

0800014c <DataParser>:
#ifndef INC_MODULES_PARSINGMODULE_H_
#define INC_MODULES_PARSINGMODULE_H_

#include "main.h"

void DataParser(uint8_t *data){
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(recive.command){
 8000154:	4b15      	ldr	r3, [pc, #84]	@ (80001ac <DataParser+0x60>)
 8000156:	781b      	ldrb	r3, [r3, #0]
 8000158:	2b01      	cmp	r3, #1
 800015a:	d002      	beq.n	8000162 <DataParser+0x16>
 800015c:	2b02      	cmp	r3, #2
 800015e:	d005      	beq.n	800016c <DataParser+0x20>
		    	action.data[i] = data[i+1];
		    }
			action.flag = DATA;
			break;
	}
}
 8000160:	e01e      	b.n	80001a0 <DataParser+0x54>
			action.flag = data[0];
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	781a      	ldrb	r2, [r3, #0]
 8000166:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <DataParser+0x64>)
 8000168:	705a      	strb	r2, [r3, #1]
			break;
 800016a:	e019      	b.n	80001a0 <DataParser+0x54>
		    for(uint16_t i=0; i<recive.length-1; i++){
 800016c:	2300      	movs	r3, #0
 800016e:	81fb      	strh	r3, [r7, #14]
 8000170:	e00c      	b.n	800018c <DataParser+0x40>
		    	action.data[i] = data[i+1];
 8000172:	89fb      	ldrh	r3, [r7, #14]
 8000174:	3301      	adds	r3, #1
 8000176:	687a      	ldr	r2, [r7, #4]
 8000178:	441a      	add	r2, r3
 800017a:	89fb      	ldrh	r3, [r7, #14]
 800017c:	7811      	ldrb	r1, [r2, #0]
 800017e:	4a0c      	ldr	r2, [pc, #48]	@ (80001b0 <DataParser+0x64>)
 8000180:	4413      	add	r3, r2
 8000182:	460a      	mov	r2, r1
 8000184:	709a      	strb	r2, [r3, #2]
		    for(uint16_t i=0; i<recive.length-1; i++){
 8000186:	89fb      	ldrh	r3, [r7, #14]
 8000188:	3301      	adds	r3, #1
 800018a:	81fb      	strh	r3, [r7, #14]
 800018c:	89fa      	ldrh	r2, [r7, #14]
 800018e:	4b07      	ldr	r3, [pc, #28]	@ (80001ac <DataParser+0x60>)
 8000190:	885b      	ldrh	r3, [r3, #2]
 8000192:	3b01      	subs	r3, #1
 8000194:	429a      	cmp	r2, r3
 8000196:	dbec      	blt.n	8000172 <DataParser+0x26>
			action.flag = DATA;
 8000198:	4b05      	ldr	r3, [pc, #20]	@ (80001b0 <DataParser+0x64>)
 800019a:	22cc      	movs	r2, #204	@ 0xcc
 800019c:	705a      	strb	r2, [r3, #1]
			break;
 800019e:	bf00      	nop
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000000 	.word	0x20000000
 80001b0:	20000004 	.word	0x20000004

080001b4 <HAL_UART_RxCpltCallback>:

uint16_t recived_bytes = 0;
uint8_t buffer[1024] = {};
uint32_t timer = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]
//	if((HAL_GetTick()-timer) >= 5)
//		recived_bytes = 0;
	buffer[recived_bytes] = rxcall;
 80001bc:	4b13      	ldr	r3, [pc, #76]	@ (800020c <HAL_UART_RxCpltCallback+0x58>)
 80001be:	881b      	ldrh	r3, [r3, #0]
 80001c0:	461a      	mov	r2, r3
 80001c2:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <HAL_UART_RxCpltCallback+0x5c>)
 80001c4:	7819      	ldrb	r1, [r3, #0]
 80001c6:	4b13      	ldr	r3, [pc, #76]	@ (8000214 <HAL_UART_RxCpltCallback+0x60>)
 80001c8:	5499      	strb	r1, [r3, r2]
	recived_bytes++;
 80001ca:	4b10      	ldr	r3, [pc, #64]	@ (800020c <HAL_UART_RxCpltCallback+0x58>)
 80001cc:	881b      	ldrh	r3, [r3, #0]
 80001ce:	3301      	adds	r3, #1
 80001d0:	b29a      	uxth	r2, r3
 80001d2:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <HAL_UART_RxCpltCallback+0x58>)
 80001d4:	801a      	strh	r2, [r3, #0]
	if(recived_bytes == recive.length){
 80001d6:	4b10      	ldr	r3, [pc, #64]	@ (8000218 <HAL_UART_RxCpltCallback+0x64>)
 80001d8:	885a      	ldrh	r2, [r3, #2]
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <HAL_UART_RxCpltCallback+0x58>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	429a      	cmp	r2, r3
 80001e0:	d105      	bne.n	80001ee <HAL_UART_RxCpltCallback+0x3a>
		recived_bytes = 0;
 80001e2:	4b0a      	ldr	r3, [pc, #40]	@ (800020c <HAL_UART_RxCpltCallback+0x58>)
 80001e4:	2200      	movs	r2, #0
 80001e6:	801a      	strh	r2, [r3, #0]
		DataParser(buffer);
 80001e8:	480a      	ldr	r0, [pc, #40]	@ (8000214 <HAL_UART_RxCpltCallback+0x60>)
 80001ea:	f7ff ffaf 	bl	800014c <DataParser>
	}
	timer = HAL_GetTick();
 80001ee:	f000 fcd9 	bl	8000ba4 <HAL_GetTick>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a09      	ldr	r2, [pc, #36]	@ (800021c <HAL_UART_RxCpltCallback+0x68>)
 80001f6:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart,&rxcall,1);
 80001f8:	2201      	movs	r2, #1
 80001fa:	4905      	ldr	r1, [pc, #20]	@ (8000210 <HAL_UART_RxCpltCallback+0x5c>)
 80001fc:	6878      	ldr	r0, [r7, #4]
 80001fe:	f001 fcd5 	bl	8001bac <HAL_UART_Receive_IT>
}
 8000202:	bf00      	nop
 8000204:	3708      	adds	r7, #8
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
 800020a:	bf00      	nop
 800020c:	20000138 	.word	0x20000138
 8000210:	20000540 	.word	0x20000540
 8000214:	2000013c 	.word	0x2000013c
 8000218:	20000000 	.word	0x20000000
 800021c:	2000053c 	.word	0x2000053c

08000220 <TransmitOnAN3155>:

void TransmitOnAN3155(uint8_t *data, uint16_t len){
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	460b      	mov	r3, r1
 800022a:	807b      	strh	r3, [r7, #2]
	for (uint16_t i = 0; i<len; i++){
 800022c:	2300      	movs	r3, #0
 800022e:	81fb      	strh	r3, [r7, #14]
 8000230:	e00b      	b.n	800024a <TransmitOnAN3155+0x2a>
		USART1->DR = data[i];
 8000232:	89fb      	ldrh	r3, [r7, #14]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	4413      	add	r3, r2
 8000238:	781a      	ldrb	r2, [r3, #0]
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <TransmitOnAN3155+0x3c>)
 800023c:	605a      	str	r2, [r3, #4]
		HAL_Delay(1);
 800023e:	2001      	movs	r0, #1
 8000240:	f000 fcba 	bl	8000bb8 <HAL_Delay>
	for (uint16_t i = 0; i<len; i++){
 8000244:	89fb      	ldrh	r3, [r7, #14]
 8000246:	3301      	adds	r3, #1
 8000248:	81fb      	strh	r3, [r7, #14]
 800024a:	89fa      	ldrh	r2, [r7, #14]
 800024c:	887b      	ldrh	r3, [r7, #2]
 800024e:	429a      	cmp	r2, r3
 8000250:	d3ef      	bcc.n	8000232 <TransmitOnAN3155+0x12>
	}
}
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40013800 	.word	0x40013800

08000260 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000266:	f107 0310 	add.w	r3, r7, #16
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
 800026e:	605a      	str	r2, [r3, #4]
 8000270:	609a      	str	r2, [r3, #8]
 8000272:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000274:	4b21      	ldr	r3, [pc, #132]	@ (80002fc <MX_GPIO_Init+0x9c>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	4a20      	ldr	r2, [pc, #128]	@ (80002fc <MX_GPIO_Init+0x9c>)
 800027a:	f043 0310 	orr.w	r3, r3, #16
 800027e:	6193      	str	r3, [r2, #24]
 8000280:	4b1e      	ldr	r3, [pc, #120]	@ (80002fc <MX_GPIO_Init+0x9c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	f003 0310 	and.w	r3, r3, #16
 8000288:	60fb      	str	r3, [r7, #12]
 800028a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800028c:	4b1b      	ldr	r3, [pc, #108]	@ (80002fc <MX_GPIO_Init+0x9c>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a1a      	ldr	r2, [pc, #104]	@ (80002fc <MX_GPIO_Init+0x9c>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b18      	ldr	r3, [pc, #96]	@ (80002fc <MX_GPIO_Init+0x9c>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0320 	and.w	r3, r3, #32
 80002a0:	60bb      	str	r3, [r7, #8]
 80002a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002a4:	4b15      	ldr	r3, [pc, #84]	@ (80002fc <MX_GPIO_Init+0x9c>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a14      	ldr	r2, [pc, #80]	@ (80002fc <MX_GPIO_Init+0x9c>)
 80002aa:	f043 0304 	orr.w	r3, r3, #4
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b12      	ldr	r3, [pc, #72]	@ (80002fc <MX_GPIO_Init+0x9c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0304 	and.w	r3, r3, #4
 80002b8:	607b      	str	r3, [r7, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80002c2:	480f      	ldr	r0, [pc, #60]	@ (8000300 <MX_GPIO_Init+0xa0>)
 80002c4:	f000 ffe0 	bl	8001288 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002ce:	480c      	ldr	r0, [pc, #48]	@ (8000300 <MX_GPIO_Init+0xa0>)
 80002d0:	f000 ffda 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80002d4:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80002d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002da:	2301      	movs	r3, #1
 80002dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e6:	f107 0310 	add.w	r3, r7, #16
 80002ea:	4619      	mov	r1, r3
 80002ec:	4804      	ldr	r0, [pc, #16]	@ (8000300 <MX_GPIO_Init+0xa0>)
 80002ee:	f000 fe47 	bl	8000f80 <HAL_GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3720      	adds	r7, #32
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000
 8000300:	40011000 	.word	0x40011000

08000304 <ModBusCRC16>:
	}
	return crc;
}

uint16_t ModBusCRC16(uint16_t crc16_now, uint8_t *data, uint16_t len)
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	6039      	str	r1, [r7, #0]
 800030e:	80fb      	strh	r3, [r7, #6]
 8000310:	4613      	mov	r3, r2
 8000312:	80bb      	strh	r3, [r7, #4]
    uint16_t i, j, tmp, crc16 = crc16_now;
 8000314:	88fb      	ldrh	r3, [r7, #6]
 8000316:	817b      	strh	r3, [r7, #10]

    for (i = 0; i < len; i++)
 8000318:	2300      	movs	r3, #0
 800031a:	81fb      	strh	r3, [r7, #14]
 800031c:	e024      	b.n	8000368 <ModBusCRC16+0x64>
    {
        crc16 ^= ((uint8_t)data[i]);
 800031e:	89fb      	ldrh	r3, [r7, #14]
 8000320:	683a      	ldr	r2, [r7, #0]
 8000322:	4413      	add	r3, r2
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	461a      	mov	r2, r3
 8000328:	897b      	ldrh	r3, [r7, #10]
 800032a:	4053      	eors	r3, r2
 800032c:	817b      	strh	r3, [r7, #10]
        for (j = 0; j < 8; j++)
 800032e:	2300      	movs	r3, #0
 8000330:	81bb      	strh	r3, [r7, #12]
 8000332:	e013      	b.n	800035c <ModBusCRC16+0x58>
        {
            tmp = (uint16_t)(crc16 & 0x0001);
 8000334:	897b      	ldrh	r3, [r7, #10]
 8000336:	f003 0301 	and.w	r3, r3, #1
 800033a:	813b      	strh	r3, [r7, #8]
            crc16 >>= 1;
 800033c:	897b      	ldrh	r3, [r7, #10]
 800033e:	085b      	lsrs	r3, r3, #1
 8000340:	817b      	strh	r3, [r7, #10]
            if (tmp == 1)
 8000342:	893b      	ldrh	r3, [r7, #8]
 8000344:	2b01      	cmp	r3, #1
 8000346:	d106      	bne.n	8000356 <ModBusCRC16+0x52>
            {
                crc16 ^= 0xa001; // тоже или полиномиальный
 8000348:	897b      	ldrh	r3, [r7, #10]
 800034a:	f483 43bf 	eor.w	r3, r3, #24448	@ 0x5f80
 800034e:	f083 037e 	eor.w	r3, r3, #126	@ 0x7e
 8000352:	43db      	mvns	r3, r3
 8000354:	817b      	strh	r3, [r7, #10]
        for (j = 0; j < 8; j++)
 8000356:	89bb      	ldrh	r3, [r7, #12]
 8000358:	3301      	adds	r3, #1
 800035a:	81bb      	strh	r3, [r7, #12]
 800035c:	89bb      	ldrh	r3, [r7, #12]
 800035e:	2b07      	cmp	r3, #7
 8000360:	d9e8      	bls.n	8000334 <ModBusCRC16+0x30>
    for (i = 0; i < len; i++)
 8000362:	89fb      	ldrh	r3, [r7, #14]
 8000364:	3301      	adds	r3, #1
 8000366:	81fb      	strh	r3, [r7, #14]
 8000368:	89fa      	ldrh	r2, [r7, #14]
 800036a:	88bb      	ldrh	r3, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3d6      	bcc.n	800031e <ModBusCRC16+0x1a>
            }
        }
    }
    return crc16;
 8000370:	897b      	ldrh	r3, [r7, #10]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <crcAN3155>:

uint8_t crcAN3155(uint8_t *data, uint8_t len){
 800037c:	b480      	push	{r7}
 800037e:	b085      	sub	sp, #20
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	460b      	mov	r3, r1
 8000386:	70fb      	strb	r3, [r7, #3]
	uint8_t numb = 0;
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<len; i++){
 800038c:	2300      	movs	r3, #0
 800038e:	60bb      	str	r3, [r7, #8]
 8000390:	e009      	b.n	80003a6 <crcAN3155+0x2a>
		numb^=data[i];
 8000392:	68bb      	ldr	r3, [r7, #8]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	4413      	add	r3, r2
 8000398:	781a      	ldrb	r2, [r3, #0]
 800039a:	7bfb      	ldrb	r3, [r7, #15]
 800039c:	4053      	eors	r3, r2
 800039e:	73fb      	strb	r3, [r7, #15]
	for(int i=0; i<len; i++){
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	3301      	adds	r3, #1
 80003a4:	60bb      	str	r3, [r7, #8]
 80003a6:	78fb      	ldrb	r3, [r7, #3]
 80003a8:	68ba      	ldr	r2, [r7, #8]
 80003aa:	429a      	cmp	r2, r3
 80003ac:	dbf1      	blt.n	8000392 <crcAN3155+0x16>
	}
	return numb;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr
	...

080003bc <BootModeStart>:
#define RESET_PORT	GPIOC

#define AN_OK	0x01
#define AN_ERROR 0x00

void BootModeStart(){
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOOT_PORT, BOOT_PIN, GPIO_PIN_SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003c6:	480a      	ldr	r0, [pc, #40]	@ (80003f0 <BootModeStart+0x34>)
 80003c8:	f000 ff5e 	bl	8001288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d2:	4807      	ldr	r0, [pc, #28]	@ (80003f0 <BootModeStart+0x34>)
 80003d4:	f000 ff58 	bl	8001288 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80003d8:	2032      	movs	r0, #50	@ 0x32
 80003da:	f000 fbed 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003e4:	4802      	ldr	r0, [pc, #8]	@ (80003f0 <BootModeStart+0x34>)
 80003e6:	f000 ff4f 	bl	8001288 <HAL_GPIO_WritePin>
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	40011000 	.word	0x40011000

080003f4 <BootModeEnd>:

void BootModeEnd(){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BOOT_PORT, BOOT_PIN, GPIO_PIN_RESET);
 80003f8:	2200      	movs	r2, #0
 80003fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003fe:	480a      	ldr	r0, [pc, #40]	@ (8000428 <BootModeEnd+0x34>)
 8000400:	f000 ff42 	bl	8001288 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800040a:	4807      	ldr	r0, [pc, #28]	@ (8000428 <BootModeEnd+0x34>)
 800040c:	f000 ff3c 	bl	8001288 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8000410:	2032      	movs	r0, #50	@ 0x32
 8000412:	f000 fbd1 	bl	8000bb8 <HAL_Delay>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800041c:	4802      	ldr	r0, [pc, #8]	@ (8000428 <BootModeEnd+0x34>)
 800041e:	f000 ff33 	bl	8001288 <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40011000 	.word	0x40011000

0800042c <AwaitResponce>:

uint8_t AwaitResponce(uint8_t status, uint32_t maxWaitTime){
 800042c:	b580      	push	{r7, lr}
 800042e:	b084      	sub	sp, #16
 8000430:	af00      	add	r7, sp, #0
 8000432:	4603      	mov	r3, r0
 8000434:	6039      	str	r1, [r7, #0]
 8000436:	71fb      	strb	r3, [r7, #7]
	uint32_t timer = HAL_GetTick();
 8000438:	f000 fbb4 	bl	8000ba4 <HAL_GetTick>
 800043c:	60f8      	str	r0, [r7, #12]
	while(action.flag != status){
 800043e:	e00d      	b.n	800045c <AwaitResponce+0x30>
		if((HAL_GetTick()-timer) >= maxWaitTime || action.flag == NACK)
 8000440:	f000 fbb0 	bl	8000ba4 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	68fb      	ldr	r3, [r7, #12]
 8000448:	1ad3      	subs	r3, r2, r3
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	429a      	cmp	r2, r3
 800044e:	d903      	bls.n	8000458 <AwaitResponce+0x2c>
 8000450:	4b07      	ldr	r3, [pc, #28]	@ (8000470 <AwaitResponce+0x44>)
 8000452:	785b      	ldrb	r3, [r3, #1]
 8000454:	2b1f      	cmp	r3, #31
 8000456:	d101      	bne.n	800045c <AwaitResponce+0x30>
			return AN_ERROR;
 8000458:	2300      	movs	r3, #0
 800045a:	e005      	b.n	8000468 <AwaitResponce+0x3c>
	while(action.flag != status){
 800045c:	4b04      	ldr	r3, [pc, #16]	@ (8000470 <AwaitResponce+0x44>)
 800045e:	785b      	ldrb	r3, [r3, #1]
 8000460:	79fa      	ldrb	r2, [r7, #7]
 8000462:	429a      	cmp	r2, r3
 8000464:	d1ec      	bne.n	8000440 <AwaitResponce+0x14>
	}
	return AN_OK;
 8000466:	2301      	movs	r3, #1
}
 8000468:	4618      	mov	r0, r3
 800046a:	3710      	adds	r7, #16
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000004 	.word	0x20000004

08000474 <StartCommand>:

void StartCommand(){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0

	uint8_t data[1] = {START_COMMAND};
 800047a:	237f      	movs	r3, #127	@ 0x7f
 800047c:	703b      	strb	r3, [r7, #0]
	uint32_t timer = 0;
 800047e:	2300      	movs	r3, #0
 8000480:	607b      	str	r3, [r7, #4]
	while(action.flag == NONE){
 8000482:	e00f      	b.n	80004a4 <StartCommand+0x30>
	  if((HAL_GetTick()-timer) >= 1000){
 8000484:	f000 fb8e 	bl	8000ba4 <HAL_GetTick>
 8000488:	4602      	mov	r2, r0
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000492:	d307      	bcc.n	80004a4 <StartCommand+0x30>
		  TransmitOnAN3155(data, 1);
 8000494:	463b      	mov	r3, r7
 8000496:	2101      	movs	r1, #1
 8000498:	4618      	mov	r0, r3
 800049a:	f7ff fec1 	bl	8000220 <TransmitOnAN3155>
		  timer = HAL_GetTick();
 800049e:	f000 fb81 	bl	8000ba4 <HAL_GetTick>
 80004a2:	6078      	str	r0, [r7, #4]
	while(action.flag == NONE){
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <StartCommand+0x4c>)
 80004a6:	785b      	ldrb	r3, [r3, #1]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0eb      	beq.n	8000484 <StartCommand+0x10>
	  }
	}
	action.flag = NONE;
 80004ac:	4b04      	ldr	r3, [pc, #16]	@ (80004c0 <StartCommand+0x4c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	705a      	strb	r2, [r3, #1]
	HAL_Delay(200);
 80004b2:	20c8      	movs	r0, #200	@ 0xc8
 80004b4:	f000 fb80 	bl	8000bb8 <HAL_Delay>

}
 80004b8:	bf00      	nop
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000004 	.word	0x20000004

080004c4 <ReadFlashData>:

uint8_t ReadFlashData(uint32_t address, uint16_t len){
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	807b      	strh	r3, [r7, #2]
	uint8_t data[5] = {READ_COMMAND, 0xFF^READ_COMMAND, 0, 0, 0};
 80004d0:	4a37      	ldr	r2, [pc, #220]	@ (80005b0 <ReadFlashData+0xec>)
 80004d2:	f107 0308 	add.w	r3, r7, #8
 80004d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004da:	6018      	str	r0, [r3, #0]
 80004dc:	3304      	adds	r3, #4
 80004de:	7019      	strb	r1, [r3, #0]
	TransmitOnAN3155(data, 2);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	2102      	movs	r1, #2
 80004e6:	4618      	mov	r0, r3
 80004e8:	f7ff fe9a 	bl	8000220 <TransmitOnAN3155>
	if(AwaitResponce(ACK, ANSWER_WAIT_TIME) == AN_ERROR)
 80004ec:	21c8      	movs	r1, #200	@ 0xc8
 80004ee:	2079      	movs	r0, #121	@ 0x79
 80004f0:	f7ff ff9c 	bl	800042c <AwaitResponce>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d101      	bne.n	80004fe <ReadFlashData+0x3a>
		return AN_ERROR;
 80004fa:	2300      	movs	r3, #0
 80004fc:	e053      	b.n	80005a6 <ReadFlashData+0xe2>
	action.flag = NONE;
 80004fe:	4b2d      	ldr	r3, [pc, #180]	@ (80005b4 <ReadFlashData+0xf0>)
 8000500:	2200      	movs	r2, #0
 8000502:	705a      	strb	r2, [r3, #1]

	data[0] = (uint8_t)(address >> 24);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	0e1b      	lsrs	r3, r3, #24
 8000508:	b2db      	uxtb	r3, r3
 800050a:	723b      	strb	r3, [r7, #8]
	data[1] = (uint8_t)(address >> 16);
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	0c1b      	lsrs	r3, r3, #16
 8000510:	b2db      	uxtb	r3, r3
 8000512:	727b      	strb	r3, [r7, #9]
	data[2] = (uint8_t)(address >> 8);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	0a1b      	lsrs	r3, r3, #8
 8000518:	b2db      	uxtb	r3, r3
 800051a:	72bb      	strb	r3, [r7, #10]
	data[3] = (uint8_t)(address);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	72fb      	strb	r3, [r7, #11]
	data[4] = crcAN3155(data, 4);
 8000522:	f107 0308 	add.w	r3, r7, #8
 8000526:	2104      	movs	r1, #4
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff27 	bl	800037c <crcAN3155>
 800052e:	4603      	mov	r3, r0
 8000530:	733b      	strb	r3, [r7, #12]
	TransmitOnAN3155(data, 5);
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2105      	movs	r1, #5
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe71 	bl	8000220 <TransmitOnAN3155>
	if(AwaitResponce(ACK, ANSWER_WAIT_TIME) == AN_ERROR)
 800053e:	21c8      	movs	r1, #200	@ 0xc8
 8000540:	2079      	movs	r0, #121	@ 0x79
 8000542:	f7ff ff73 	bl	800042c <AwaitResponce>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d101      	bne.n	8000550 <ReadFlashData+0x8c>
		return AN_ERROR;
 800054c:	2300      	movs	r3, #0
 800054e:	e02a      	b.n	80005a6 <ReadFlashData+0xe2>
	action.flag = NONE;
 8000550:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <ReadFlashData+0xf0>)
 8000552:	2200      	movs	r2, #0
 8000554:	705a      	strb	r2, [r3, #1]

	data[0] = (uint8_t)(len-1);
 8000556:	887b      	ldrh	r3, [r7, #2]
 8000558:	b2db      	uxtb	r3, r3
 800055a:	3b01      	subs	r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	723b      	strb	r3, [r7, #8]
	data[1] = ((uint8_t)(len-1))^0xFF;
 8000560:	887b      	ldrh	r3, [r7, #2]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	425b      	negs	r3, r3
 8000566:	b2db      	uxtb	r3, r3
 8000568:	727b      	strb	r3, [r7, #9]
	recive.command = RECIVE_DATA;
 800056a:	4b13      	ldr	r3, [pc, #76]	@ (80005b8 <ReadFlashData+0xf4>)
 800056c:	2202      	movs	r2, #2
 800056e:	701a      	strb	r2, [r3, #0]
	recive.length = len+1;
 8000570:	887b      	ldrh	r3, [r7, #2]
 8000572:	3301      	adds	r3, #1
 8000574:	b29a      	uxth	r2, r3
 8000576:	4b10      	ldr	r3, [pc, #64]	@ (80005b8 <ReadFlashData+0xf4>)
 8000578:	805a      	strh	r2, [r3, #2]
	TransmitOnAN3155(data, 2);
 800057a:	f107 0308 	add.w	r3, r7, #8
 800057e:	2102      	movs	r1, #2
 8000580:	4618      	mov	r0, r3
 8000582:	f7ff fe4d 	bl	8000220 <TransmitOnAN3155>
	if(AwaitResponce(DATA, ANSWER_WAIT_TIME) == AN_ERROR)
 8000586:	21c8      	movs	r1, #200	@ 0xc8
 8000588:	20cc      	movs	r0, #204	@ 0xcc
 800058a:	f7ff ff4f 	bl	800042c <AwaitResponce>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d101      	bne.n	8000598 <ReadFlashData+0xd4>
		return AN_ERROR;
 8000594:	2300      	movs	r3, #0
 8000596:	e006      	b.n	80005a6 <ReadFlashData+0xe2>
	recive.command = RECIVE_STATE;
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <ReadFlashData+0xf4>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
	recive.length = 1;
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <ReadFlashData+0xf4>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	805a      	strh	r2, [r3, #2]

	return AN_OK;
 80005a4:	2301      	movs	r3, #1
}
 80005a6:	4618      	mov	r0, r3
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	0800268c 	.word	0x0800268c
 80005b4:	20000004 	.word	0x20000004
 80005b8:	20000000 	.word	0x20000000

080005bc <GoInProgramm>:

uint8_t GoInProgramm(uint32_t address){
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	uint8_t data[5] = {GO_COMMAND, 0xFF^GO_COMMAND, 0, 0, 0};
 80005c4:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <GoInProgramm+0x98>)
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ce:	6018      	str	r0, [r3, #0]
 80005d0:	3304      	adds	r3, #4
 80005d2:	7019      	strb	r1, [r3, #0]
	TransmitOnAN3155(data, 2);
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2102      	movs	r1, #2
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fe20 	bl	8000220 <TransmitOnAN3155>
	if(AwaitResponce(ACK, ANSWER_WAIT_TIME) == AN_ERROR)
 80005e0:	21c8      	movs	r1, #200	@ 0xc8
 80005e2:	2079      	movs	r0, #121	@ 0x79
 80005e4:	f7ff ff22 	bl	800042c <AwaitResponce>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d101      	bne.n	80005f2 <GoInProgramm+0x36>
		return AN_ERROR;
 80005ee:	2300      	movs	r3, #0
 80005f0:	e02c      	b.n	800064c <GoInProgramm+0x90>
	action.flag = NONE;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <GoInProgramm+0x9c>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	705a      	strb	r2, [r3, #1]

	data[0] = (uint8_t)(address >> 24);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	0e1b      	lsrs	r3, r3, #24
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	723b      	strb	r3, [r7, #8]
	data[1] = (uint8_t)(address >> 16);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	0c1b      	lsrs	r3, r3, #16
 8000604:	b2db      	uxtb	r3, r3
 8000606:	727b      	strb	r3, [r7, #9]
	data[2] = (uint8_t)(address >> 8);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72bb      	strb	r3, [r7, #10]
	data[3] = (uint8_t)(address);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	72fb      	strb	r3, [r7, #11]
	data[4] = crcAN3155(data, 4);
 8000616:	f107 0308 	add.w	r3, r7, #8
 800061a:	2104      	movs	r1, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fead 	bl	800037c <crcAN3155>
 8000622:	4603      	mov	r3, r0
 8000624:	733b      	strb	r3, [r7, #12]
	TransmitOnAN3155(data, 5);
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	2105      	movs	r1, #5
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff fdf7 	bl	8000220 <TransmitOnAN3155>
	if(AwaitResponce(ACK, ANSWER_WAIT_TIME) == AN_ERROR)
 8000632:	21c8      	movs	r1, #200	@ 0xc8
 8000634:	2079      	movs	r0, #121	@ 0x79
 8000636:	f7ff fef9 	bl	800042c <AwaitResponce>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d101      	bne.n	8000644 <GoInProgramm+0x88>
		return AN_ERROR;
 8000640:	2300      	movs	r3, #0
 8000642:	e003      	b.n	800064c <GoInProgramm+0x90>
	action.flag = NONE;
 8000644:	4b04      	ldr	r3, [pc, #16]	@ (8000658 <GoInProgramm+0x9c>)
 8000646:	2200      	movs	r2, #0
 8000648:	705a      	strb	r2, [r3, #1]
	return AN_OK;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	08002694 	.word	0x08002694
 8000658:	20000004 	.word	0x20000004

0800065c <main>:
uint16_t read = 256;

uint16_t schet = 0;

int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000660:	f000 fa48 	bl	8000af4 <HAL_Init>
  SystemClock_Config();
 8000664:	f000 f8fe 	bl	8000864 <SystemClock_Config>
  MX_GPIO_Init();
 8000668:	f7ff fdfa 	bl	8000260 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800066c:	f000 f9a4 	bl	80009b8 <MX_USART1_UART_Init>
  HAL_UART_Receive_IT(&huart1,&rxcall,1);
 8000670:	2201      	movs	r2, #1
 8000672:	4972      	ldr	r1, [pc, #456]	@ (800083c <main+0x1e0>)
 8000674:	4872      	ldr	r0, [pc, #456]	@ (8000840 <main+0x1e4>)
 8000676:	f001 fa99 	bl	8001bac <HAL_UART_Receive_IT>

  BootModeStart();
 800067a:	f7ff fe9f 	bl	80003bc <BootModeStart>
  HAL_Delay(700);
 800067e:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8000682:	f000 fa99 	bl	8000bb8 <HAL_Delay>
  StartCommand();
 8000686:	f7ff fef5 	bl	8000474 <StartCommand>
  while (1)
  {
	  switch(action.command){
 800068a:	4b6e      	ldr	r3, [pc, #440]	@ (8000844 <main+0x1e8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b21      	cmp	r3, #33	@ 0x21
 8000690:	d8fb      	bhi.n	800068a <main+0x2e>
 8000692:	a201      	add	r2, pc, #4	@ (adr r2, 8000698 <main+0x3c>)
 8000694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000698:	08000819 	.word	0x08000819
 800069c:	08000721 	.word	0x08000721
 80006a0:	08000739 	.word	0x08000739
 80006a4:	08000751 	.word	0x08000751
 80006a8:	0800068b 	.word	0x0800068b
 80006ac:	0800068b 	.word	0x0800068b
 80006b0:	0800068b 	.word	0x0800068b
 80006b4:	0800068b 	.word	0x0800068b
 80006b8:	0800068b 	.word	0x0800068b
 80006bc:	0800068b 	.word	0x0800068b
 80006c0:	0800068b 	.word	0x0800068b
 80006c4:	0800068b 	.word	0x0800068b
 80006c8:	0800068b 	.word	0x0800068b
 80006cc:	0800068b 	.word	0x0800068b
 80006d0:	0800068b 	.word	0x0800068b
 80006d4:	0800068b 	.word	0x0800068b
 80006d8:	0800068b 	.word	0x0800068b
 80006dc:	0800068b 	.word	0x0800068b
 80006e0:	0800068b 	.word	0x0800068b
 80006e4:	0800068b 	.word	0x0800068b
 80006e8:	0800068b 	.word	0x0800068b
 80006ec:	0800068b 	.word	0x0800068b
 80006f0:	0800068b 	.word	0x0800068b
 80006f4:	0800068b 	.word	0x0800068b
 80006f8:	0800068b 	.word	0x0800068b
 80006fc:	0800068b 	.word	0x0800068b
 8000700:	0800068b 	.word	0x0800068b
 8000704:	0800068b 	.word	0x0800068b
 8000708:	0800068b 	.word	0x0800068b
 800070c:	0800068b 	.word	0x0800068b
 8000710:	0800068b 	.word	0x0800068b
 8000714:	0800068b 	.word	0x0800068b
 8000718:	0800068b 	.word	0x0800068b
 800071c:	080007ff 	.word	0x080007ff
	  	  case(GET_DATA_SIZE):
			  if(ReadFlashData(FLASH_DATA_SIZE_POS, FLASH_DATA_SIZE_LEN)){
 8000720:	2104      	movs	r1, #4
 8000722:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000726:	f7ff fecd 	bl	80004c4 <ReadFlashData>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d07d      	beq.n	800082c <main+0x1d0>
//			      (uint32_t)(action.data[1] << 16) | (uint32_t)(action.data[2] << 8) |
//				  (uint32_t)(action.data[3]);
//				  crc_now = crc16(crc_now, action.data, 2);
//				  uint8_t dt[2] = {action.data[2], action.data[3]};
//				  crc_now = crc16(crc_now, dt, 2);
				  action.command = GET_CRC16;
 8000730:	4b44      	ldr	r3, [pc, #272]	@ (8000844 <main+0x1e8>)
 8000732:	2202      	movs	r2, #2
 8000734:	701a      	strb	r2, [r3, #0]
			  }
		  	  break;
 8000736:	e079      	b.n	800082c <main+0x1d0>
	  	  case(GET_CRC16):
			  if(ReadFlashData(FLASH_CRC16_POS, 2)){
 8000738:	2102      	movs	r1, #2
 800073a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 800073e:	f7ff fec1 	bl	80004c4 <ReadFlashData>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d073      	beq.n	8000830 <main+0x1d4>
//				  crc16_schet = (uint16_t)(action.data[0] << 8) |
//				  (uint16_t)(action.data[1]);
				  action.command = READ_DATA;
 8000748:	4b3e      	ldr	r3, [pc, #248]	@ (8000844 <main+0x1e8>)
 800074a:	2203      	movs	r2, #3
 800074c:	701a      	strb	r2, [r3, #0]
			  }
	  	  	  break;
 800074e:	e06f      	b.n	8000830 <main+0x1d4>
	  	  case(READ_DATA):
			  if(ReadFlashData(FLASH_ADRESS_START+byteReads, read) && dataSize >= read){
 8000750:	4b3d      	ldr	r3, [pc, #244]	@ (8000848 <main+0x1ec>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000758:	4a3c      	ldr	r2, [pc, #240]	@ (800084c <main+0x1f0>)
 800075a:	8812      	ldrh	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff feb0 	bl	80004c4 <ReadFlashData>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d064      	beq.n	8000834 <main+0x1d8>
 800076a:	4b38      	ldr	r3, [pc, #224]	@ (800084c <main+0x1f0>)
 800076c:	881b      	ldrh	r3, [r3, #0]
 800076e:	461a      	mov	r2, r3
 8000770:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <main+0x1f4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	429a      	cmp	r2, r3
 8000776:	d85d      	bhi.n	8000834 <main+0x1d8>
				  byteReads+=read;
 8000778:	4b34      	ldr	r3, [pc, #208]	@ (800084c <main+0x1f0>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <main+0x1ec>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4413      	add	r3, r2
 8000784:	4a30      	ldr	r2, [pc, #192]	@ (8000848 <main+0x1ec>)
 8000786:	6013      	str	r3, [r2, #0]
				  crc_now = ModBusCRC16(crc_now, action.data, read);
 8000788:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <main+0x1f8>)
 800078a:	881b      	ldrh	r3, [r3, #0]
 800078c:	b29b      	uxth	r3, r3
 800078e:	4a2f      	ldr	r2, [pc, #188]	@ (800084c <main+0x1f0>)
 8000790:	8812      	ldrh	r2, [r2, #0]
 8000792:	4931      	ldr	r1, [pc, #196]	@ (8000858 <main+0x1fc>)
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fdb5 	bl	8000304 <ModBusCRC16>
 800079a:	4603      	mov	r3, r0
 800079c:	461a      	mov	r2, r3
 800079e:	4b2d      	ldr	r3, [pc, #180]	@ (8000854 <main+0x1f8>)
 80007a0:	801a      	strh	r2, [r3, #0]
				  schet+=1;
 80007a2:	4b2e      	ldr	r3, [pc, #184]	@ (800085c <main+0x200>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b2c      	ldr	r3, [pc, #176]	@ (800085c <main+0x200>)
 80007ac:	801a      	strh	r2, [r3, #0]
				  if(schet == 2){
 80007ae:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <main+0x200>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d105      	bne.n	80007c2 <main+0x166>
					  HAL_Delay(50);
 80007b6:	2032      	movs	r0, #50	@ 0x32
 80007b8:	f000 f9fe 	bl	8000bb8 <HAL_Delay>
					  HAL_Delay(10);
 80007bc:	200a      	movs	r0, #10
 80007be:	f000 f9fb 	bl	8000bb8 <HAL_Delay>
				  }
				  if((dataSize-byteReads) == 0){
 80007c2:	4b23      	ldr	r3, [pc, #140]	@ (8000850 <main+0x1f4>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <main+0x1ec>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d103      	bne.n	80007d6 <main+0x17a>
					  action.command = GO_COMMAND;
 80007ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <main+0x1e8>)
 80007d0:	2221      	movs	r2, #33	@ 0x21
 80007d2:	701a      	strb	r2, [r3, #0]
				  }else if((dataSize-byteReads) < read){
					  read = (dataSize-byteReads);
				  }
			  }
	  	  	  break;
 80007d4:	e02e      	b.n	8000834 <main+0x1d8>
				  }else if((dataSize-byteReads) < read){
 80007d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000850 <main+0x1f4>)
 80007d8:	681a      	ldr	r2, [r3, #0]
 80007da:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <main+0x1ec>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	4a1a      	ldr	r2, [pc, #104]	@ (800084c <main+0x1f0>)
 80007e2:	8812      	ldrh	r2, [r2, #0]
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d225      	bcs.n	8000834 <main+0x1d8>
					  read = (dataSize-byteReads);
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <main+0x1f4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	b29a      	uxth	r2, r3
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <main+0x1ec>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	1ad3      	subs	r3, r2, r3
 80007f6:	b29a      	uxth	r2, r3
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <main+0x1f0>)
 80007fa:	801a      	strh	r2, [r3, #0]
	  	  	  break;
 80007fc:	e01a      	b.n	8000834 <main+0x1d8>
	  	  case(GO_COMMAND):
			  if(GoInProgramm(FLASH_ADRESS_START)){
 80007fe:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000802:	f7ff fedb 	bl	80005bc <GoInProgramm>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d015      	beq.n	8000838 <main+0x1dc>
				  BootModeEnd();
 800080c:	f7ff fdf2 	bl	80003f4 <BootModeEnd>
				  action.command = 0x00;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <main+0x1e8>)
 8000812:	2200      	movs	r2, #0
 8000814:	701a      	strb	r2, [r3, #0]
			  }
	  	  	  break;
 8000816:	e00f      	b.n	8000838 <main+0x1dc>
	  	  case(0):
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000818:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081c:	4810      	ldr	r0, [pc, #64]	@ (8000860 <main+0x204>)
 800081e:	f000 fd4b 	bl	80012b8 <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000826:	f000 f9c7 	bl	8000bb8 <HAL_Delay>
 800082a:	e72e      	b.n	800068a <main+0x2e>
		  	  break;
 800082c:	bf00      	nop
 800082e:	e72c      	b.n	800068a <main+0x2e>
	  	  	  break;
 8000830:	bf00      	nop
 8000832:	e72a      	b.n	800068a <main+0x2e>
	  	  	  break;
 8000834:	bf00      	nop
 8000836:	e728      	b.n	800068a <main+0x2e>
	  	  	  break;
 8000838:	bf00      	nop
 800083a:	e726      	b.n	800068a <main+0x2e>
 800083c:	20000540 	.word	0x20000540
 8000840:	2000054c 	.word	0x2000054c
 8000844:	20000004 	.word	0x20000004
 8000848:	20000544 	.word	0x20000544
 800084c:	2000010e 	.word	0x2000010e
 8000850:	20000108 	.word	0x20000108
 8000854:	2000010c 	.word	0x2000010c
 8000858:	20000006 	.word	0x20000006
 800085c:	20000548 	.word	0x20000548
 8000860:	40011000 	.word	0x40011000

08000864 <SystemClock_Config>:
	  }
  }
}

void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b090      	sub	sp, #64	@ 0x40
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0318 	add.w	r3, r7, #24
 800086e:	2228      	movs	r2, #40	@ 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f001 fed2 	bl	800261c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000886:	2301      	movs	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800088a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000898:	2302      	movs	r3, #2
 800089a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80008a2:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80008a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80008a8:	f107 0318 	add.w	r3, r7, #24
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 fd1d 	bl	80012ec <HAL_RCC_OscConfig>

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2302      	movs	r3, #2
 80008b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 80008c8:	1d3b      	adds	r3, r7, #4
 80008ca:	2102      	movs	r1, #2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 ff8f 	bl	80017f0 <HAL_RCC_ClockConfig>
}
 80008d2:	bf00      	nop
 80008d4:	3740      	adds	r7, #64	@ 0x40
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e4:	699b      	ldr	r3, [r3, #24]
 80008e6:	4a14      	ldr	r2, [pc, #80]	@ (8000938 <HAL_MspInit+0x5c>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	6193      	str	r3, [r2, #24]
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <HAL_MspInit+0x5c>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <HAL_MspInit+0x5c>)
 80008fc:	69db      	ldr	r3, [r3, #28]
 80008fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000938 <HAL_MspInit+0x5c>)
 8000900:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000904:	61d3      	str	r3, [r2, #28]
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <HAL_MspInit+0x5c>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000912:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <HAL_MspInit+0x60>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800091e:	60fb      	str	r3, [r7, #12]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	4a04      	ldr	r2, [pc, #16]	@ (800093c <HAL_MspInit+0x60>)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40021000 	.word	0x40021000
 800093c:	40010000 	.word	0x40010000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <NMI_Handler+0x4>

08000948 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <HardFault_Handler+0x4>

08000950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <MemManage_Handler+0x4>

08000958 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095c:	bf00      	nop
 800095e:	e7fd      	b.n	800095c <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <UsageFault_Handler+0x4>

08000968 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr

08000974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr

08000980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	bc80      	pop	{r7}
 800098a:	4770      	bx	lr

0800098c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000990:	f000 f8f6 	bl	8000b80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}

08000998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800099c:	4802      	ldr	r0, [pc, #8]	@ (80009a8 <USART1_IRQHandler+0x10>)
 800099e:	f001 f92b 	bl	8001bf8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000054c 	.word	0x2000054c

080009ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <MX_USART1_UART_Init+0x44>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b09      	ldr	r3, [pc, #36]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 80009ee:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <MX_USART1_UART_Init+0x40>)
 80009f0:	f001 f88c 	bl	8001b0c <HAL_UART_Init>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000054c 	.word	0x2000054c
 80009fc:	40013800 	.word	0x40013800

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b088      	sub	sp, #32
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0310 	add.w	r3, r7, #16
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a20      	ldr	r2, [pc, #128]	@ (8000a9c <HAL_UART_MspInit+0x9c>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d139      	bne.n	8000a94 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a20:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a1e      	ldr	r2, [pc, #120]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b19      	ldr	r3, [pc, #100]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a18      	ldr	r2, [pc, #96]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b16      	ldr	r3, [pc, #88]	@ (8000aa0 <HAL_UART_MspInit+0xa0>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a66:	f000 fa8b 	bl	8000f80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4809      	ldr	r0, [pc, #36]	@ (8000aa4 <HAL_UART_MspInit+0xa4>)
 8000a80:	f000 fa7e 	bl	8000f80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a84:	2200      	movs	r2, #0
 8000a86:	2100      	movs	r1, #0
 8000a88:	2025      	movs	r0, #37	@ 0x25
 8000a8a:	f000 f990 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a8e:	2025      	movs	r0, #37	@ 0x25
 8000a90:	f000 f9a9 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000a94:	bf00      	nop
 8000a96:	3720      	adds	r7, #32
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40013800 	.word	0x40013800
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	40010800 	.word	0x40010800

08000aa8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ff80 	bl	80009ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	@ (8000adc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000aae:	490c      	ldr	r1, [pc, #48]	@ (8000ae0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8000ae4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a09      	ldr	r2, [pc, #36]	@ (8000ae8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ac4:	4c09      	ldr	r4, [pc, #36]	@ (8000aec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fdab 	bl	800262c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ad6:	f7ff fdc1 	bl	800065c <main>
  bx lr
 8000ada:	4770      	bx	lr
  ldr r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae0:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000ae4:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8000ae8:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000aec:	20000598 	.word	0x20000598

08000af0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000af0:	e7fe      	b.n	8000af0 <ADC1_2_IRQHandler>
	...

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af8:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <HAL_Init+0x28>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a07      	ldr	r2, [pc, #28]	@ (8000b1c <HAL_Init+0x28>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b04:	2003      	movs	r0, #3
 8000b06:	f000 f947 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0a:	200f      	movs	r0, #15
 8000b0c:	f000 f808 	bl	8000b20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b10:	f7ff fee4 	bl	80008dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40022000 	.word	0x40022000

08000b20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b28:	4b12      	ldr	r3, [pc, #72]	@ (8000b74 <HAL_InitTick+0x54>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_InitTick+0x58>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	4619      	mov	r1, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f95f 	bl	8000e02 <HAL_SYSTICK_Config>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00e      	b.n	8000b6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b0f      	cmp	r3, #15
 8000b52:	d80a      	bhi.n	8000b6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b54:	2200      	movs	r2, #0
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f000 f927 	bl	8000dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b60:	4a06      	ldr	r2, [pc, #24]	@ (8000b7c <HAL_InitTick+0x5c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
 8000b68:	e000      	b.n	8000b6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6a:	2301      	movs	r3, #1
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000110 	.word	0x20000110
 8000b78:	20000118 	.word	0x20000118
 8000b7c:	20000114 	.word	0x20000114

08000b80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b84:	4b05      	ldr	r3, [pc, #20]	@ (8000b9c <HAL_IncTick+0x1c>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a03      	ldr	r2, [pc, #12]	@ (8000ba0 <HAL_IncTick+0x20>)
 8000b92:	6013      	str	r3, [r2, #0]
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr
 8000b9c:	20000118 	.word	0x20000118
 8000ba0:	20000594 	.word	0x20000594

08000ba4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b02      	ldr	r3, [pc, #8]	@ (8000bb4 <HAL_GetTick+0x10>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	20000594 	.word	0x20000594

08000bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc0:	f7ff fff0 	bl	8000ba4 <HAL_GetTick>
 8000bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd0:	d005      	beq.n	8000bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000bfc <HAL_Delay+0x44>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	4413      	add	r3, r2
 8000bdc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bde:	bf00      	nop
 8000be0:	f7ff ffe0 	bl	8000ba4 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	68fa      	ldr	r2, [r7, #12]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d8f7      	bhi.n	8000be0 <HAL_Delay+0x28>
  {
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000118 	.word	0x20000118

08000c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f003 0307 	and.w	r3, r3, #7
 8000c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c10:	4b0c      	ldr	r3, [pc, #48]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c28:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c32:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <__NVIC_SetPriorityGrouping+0x44>)
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	60d3      	str	r3, [r2, #12]
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000ed00 	.word	0xe000ed00

08000c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c4c:	4b04      	ldr	r3, [pc, #16]	@ (8000c60 <__NVIC_GetPriorityGrouping+0x18>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	0a1b      	lsrs	r3, r3, #8
 8000c52:	f003 0307 	and.w	r3, r3, #7
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	db0b      	blt.n	8000c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	f003 021f 	and.w	r2, r3, #31
 8000c7c:	4906      	ldr	r1, [pc, #24]	@ (8000c98 <__NVIC_EnableIRQ+0x34>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	095b      	lsrs	r3, r3, #5
 8000c84:	2001      	movs	r0, #1
 8000c86:	fa00 f202 	lsl.w	r2, r0, r2
 8000c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100

08000c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	db0a      	blt.n	8000cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	490c      	ldr	r1, [pc, #48]	@ (8000ce8 <__NVIC_SetPriority+0x4c>)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	0112      	lsls	r2, r2, #4
 8000cbc:	b2d2      	uxtb	r2, r2
 8000cbe:	440b      	add	r3, r1
 8000cc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc4:	e00a      	b.n	8000cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4908      	ldr	r1, [pc, #32]	@ (8000cec <__NVIC_SetPriority+0x50>)
 8000ccc:	79fb      	ldrb	r3, [r7, #7]
 8000cce:	f003 030f 	and.w	r3, r3, #15
 8000cd2:	3b04      	subs	r3, #4
 8000cd4:	0112      	lsls	r2, r2, #4
 8000cd6:	b2d2      	uxtb	r2, r2
 8000cd8:	440b      	add	r3, r1
 8000cda:	761a      	strb	r2, [r3, #24]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	e000e100 	.word	0xe000e100
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	@ 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	f1c3 0307 	rsb	r3, r3, #7
 8000d0a:	2b04      	cmp	r3, #4
 8000d0c:	bf28      	it	cs
 8000d0e:	2304      	movcs	r3, #4
 8000d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	3304      	adds	r3, #4
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d902      	bls.n	8000d20 <NVIC_EncodePriority+0x30>
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	3b03      	subs	r3, #3
 8000d1e:	e000      	b.n	8000d22 <NVIC_EncodePriority+0x32>
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d24:	f04f 32ff 	mov.w	r2, #4294967295
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43da      	mvns	r2, r3
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	401a      	ands	r2, r3
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d38:	f04f 31ff 	mov.w	r1, #4294967295
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d42:	43d9      	mvns	r1, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d48:	4313      	orrs	r3, r2
         );
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	3724      	adds	r7, #36	@ 0x24
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d64:	d301      	bcc.n	8000d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00f      	b.n	8000d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <SysTick_Config+0x40>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d72:	210f      	movs	r1, #15
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f7ff ff90 	bl	8000c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <SysTick_Config+0x40>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d82:	4b04      	ldr	r3, [pc, #16]	@ (8000d94 <SysTick_Config+0x40>)
 8000d84:	2207      	movs	r2, #7
 8000d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	e000e010 	.word	0xe000e010

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff2d 	bl	8000c00 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff42 	bl	8000c48 <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ff90 	bl	8000cf0 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff5f 	bl	8000c9c <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff35 	bl	8000c64 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b082      	sub	sp, #8
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff ffa2 	bl	8000d54 <SysTick_Config>
 8000e10:	4603      	mov	r3, r0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b085      	sub	sp, #20
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d008      	beq.n	8000e44 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2204      	movs	r2, #4
 8000e36:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	e020      	b.n	8000e86 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f022 020e 	bic.w	r2, r2, #14
 8000e52:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f022 0201 	bic.w	r2, r2, #1
 8000e62:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e72:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d005      	beq.n	8000eb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2204      	movs	r2, #4
 8000eac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e051      	b.n	8000f58 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 020e 	bic.w	r2, r2, #14
 8000ec2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0201 	bic.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a22      	ldr	r2, [pc, #136]	@ (8000f64 <HAL_DMA_Abort_IT+0xd4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d029      	beq.n	8000f32 <HAL_DMA_Abort_IT+0xa2>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a21      	ldr	r2, [pc, #132]	@ (8000f68 <HAL_DMA_Abort_IT+0xd8>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d022      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x9e>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1f      	ldr	r2, [pc, #124]	@ (8000f6c <HAL_DMA_Abort_IT+0xdc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01a      	beq.n	8000f28 <HAL_DMA_Abort_IT+0x98>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f70 <HAL_DMA_Abort_IT+0xe0>)
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d012      	beq.n	8000f22 <HAL_DMA_Abort_IT+0x92>
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <HAL_DMA_Abort_IT+0xe4>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d00a      	beq.n	8000f1c <HAL_DMA_Abort_IT+0x8c>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f78 <HAL_DMA_Abort_IT+0xe8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d102      	bne.n	8000f16 <HAL_DMA_Abort_IT+0x86>
 8000f10:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f14:	e00e      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f16:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f1a:	e00b      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f20:	e008      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f26:	e005      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	e002      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f2e:	2310      	movs	r3, #16
 8000f30:	e000      	b.n	8000f34 <HAL_DMA_Abort_IT+0xa4>
 8000f32:	2301      	movs	r3, #1
 8000f34:	4a11      	ldr	r2, [pc, #68]	@ (8000f7c <HAL_DMA_Abort_IT+0xec>)
 8000f36:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	4798      	blx	r3
    } 
  }
  return status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40020008 	.word	0x40020008
 8000f68:	4002001c 	.word	0x4002001c
 8000f6c:	40020030 	.word	0x40020030
 8000f70:	40020044 	.word	0x40020044
 8000f74:	40020058 	.word	0x40020058
 8000f78:	4002006c 	.word	0x4002006c
 8000f7c:	40020000 	.word	0x40020000

08000f80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b08b      	sub	sp, #44	@ 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f92:	e169      	b.n	8001268 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f94:	2201      	movs	r2, #1
 8000f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	429a      	cmp	r2, r3
 8000fae:	f040 8158 	bne.w	8001262 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	4a9a      	ldr	r2, [pc, #616]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d05e      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fbc:	4a98      	ldr	r2, [pc, #608]	@ (8001220 <HAL_GPIO_Init+0x2a0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d875      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fc2:	4a98      	ldr	r2, [pc, #608]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d058      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fc8:	4a96      	ldr	r2, [pc, #600]	@ (8001224 <HAL_GPIO_Init+0x2a4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d86f      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fce:	4a96      	ldr	r2, [pc, #600]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d052      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fd4:	4a94      	ldr	r2, [pc, #592]	@ (8001228 <HAL_GPIO_Init+0x2a8>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d869      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fda:	4a94      	ldr	r2, [pc, #592]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d04c      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fe0:	4a92      	ldr	r2, [pc, #584]	@ (800122c <HAL_GPIO_Init+0x2ac>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d863      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000fe6:	4a92      	ldr	r2, [pc, #584]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d046      	beq.n	800107a <HAL_GPIO_Init+0xfa>
 8000fec:	4a90      	ldr	r2, [pc, #576]	@ (8001230 <HAL_GPIO_Init+0x2b0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d85d      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ff2:	2b12      	cmp	r3, #18
 8000ff4:	d82a      	bhi.n	800104c <HAL_GPIO_Init+0xcc>
 8000ff6:	2b12      	cmp	r3, #18
 8000ff8:	d859      	bhi.n	80010ae <HAL_GPIO_Init+0x12e>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <HAL_GPIO_Init+0x80>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	0800107b 	.word	0x0800107b
 8001004:	08001055 	.word	0x08001055
 8001008:	08001067 	.word	0x08001067
 800100c:	080010a9 	.word	0x080010a9
 8001010:	080010af 	.word	0x080010af
 8001014:	080010af 	.word	0x080010af
 8001018:	080010af 	.word	0x080010af
 800101c:	080010af 	.word	0x080010af
 8001020:	080010af 	.word	0x080010af
 8001024:	080010af 	.word	0x080010af
 8001028:	080010af 	.word	0x080010af
 800102c:	080010af 	.word	0x080010af
 8001030:	080010af 	.word	0x080010af
 8001034:	080010af 	.word	0x080010af
 8001038:	080010af 	.word	0x080010af
 800103c:	080010af 	.word	0x080010af
 8001040:	080010af 	.word	0x080010af
 8001044:	0800105d 	.word	0x0800105d
 8001048:	08001071 	.word	0x08001071
 800104c:	4a79      	ldr	r2, [pc, #484]	@ (8001234 <HAL_GPIO_Init+0x2b4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001052:	e02c      	b.n	80010ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e029      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	3304      	adds	r3, #4
 8001062:	623b      	str	r3, [r7, #32]
          break;
 8001064:	e024      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	3308      	adds	r3, #8
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e01f      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	330c      	adds	r3, #12
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e01a      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d102      	bne.n	8001088 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001082:	2304      	movs	r3, #4
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e013      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d105      	bne.n	800109c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001090:	2308      	movs	r3, #8
 8001092:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	611a      	str	r2, [r3, #16]
          break;
 800109a:	e009      	b.n	80010b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800109c:	2308      	movs	r3, #8
 800109e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	69fa      	ldr	r2, [r7, #28]
 80010a4:	615a      	str	r2, [r3, #20]
          break;
 80010a6:	e003      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010a8:	2300      	movs	r3, #0
 80010aa:	623b      	str	r3, [r7, #32]
          break;
 80010ac:	e000      	b.n	80010b0 <HAL_GPIO_Init+0x130>
          break;
 80010ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2bff      	cmp	r3, #255	@ 0xff
 80010b4:	d801      	bhi.n	80010ba <HAL_GPIO_Init+0x13a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	e001      	b.n	80010be <HAL_GPIO_Init+0x13e>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010c0:	69bb      	ldr	r3, [r7, #24]
 80010c2:	2bff      	cmp	r3, #255	@ 0xff
 80010c4:	d802      	bhi.n	80010cc <HAL_GPIO_Init+0x14c>
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	e002      	b.n	80010d2 <HAL_GPIO_Init+0x152>
 80010cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ce:	3b08      	subs	r3, #8
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	210f      	movs	r1, #15
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	6a39      	ldr	r1, [r7, #32]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ec:	431a      	orrs	r2, r3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	f000 80b1 	beq.w	8001262 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001100:	4b4d      	ldr	r3, [pc, #308]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	4a4c      	ldr	r2, [pc, #304]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6193      	str	r3, [r2, #24]
 800110c:	4b4a      	ldr	r3, [pc, #296]	@ (8001238 <HAL_GPIO_Init+0x2b8>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
 8001116:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001118:	4a48      	ldr	r2, [pc, #288]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	089b      	lsrs	r3, r3, #2
 800111e:	3302      	adds	r3, #2
 8001120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001124:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a40      	ldr	r2, [pc, #256]	@ (8001240 <HAL_GPIO_Init+0x2c0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d013      	beq.n	800116c <HAL_GPIO_Init+0x1ec>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a3f      	ldr	r2, [pc, #252]	@ (8001244 <HAL_GPIO_Init+0x2c4>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d00d      	beq.n	8001168 <HAL_GPIO_Init+0x1e8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a3e      	ldr	r2, [pc, #248]	@ (8001248 <HAL_GPIO_Init+0x2c8>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x1e4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_GPIO_Init+0x2cc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d101      	bne.n	8001160 <HAL_GPIO_Init+0x1e0>
 800115c:	2303      	movs	r3, #3
 800115e:	e006      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001160:	2304      	movs	r3, #4
 8001162:	e004      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001164:	2302      	movs	r3, #2
 8001166:	e002      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <HAL_GPIO_Init+0x1ee>
 800116c:	2300      	movs	r3, #0
 800116e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001170:	f002 0203 	and.w	r2, r2, #3
 8001174:	0092      	lsls	r2, r2, #2
 8001176:	4093      	lsls	r3, r2
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800117e:	492f      	ldr	r1, [pc, #188]	@ (800123c <HAL_GPIO_Init+0x2bc>)
 8001180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	68fa      	ldr	r2, [r7, #12]
 8001188:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001198:	4b2d      	ldr	r3, [pc, #180]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	492c      	ldr	r1, [pc, #176]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	608b      	str	r3, [r1, #8]
 80011a4:	e006      	b.n	80011b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011a6:	4b2a      	ldr	r3, [pc, #168]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4928      	ldr	r1, [pc, #160]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d006      	beq.n	80011ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011c0:	4b23      	ldr	r3, [pc, #140]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c2:	68da      	ldr	r2, [r3, #12]
 80011c4:	4922      	ldr	r1, [pc, #136]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	60cb      	str	r3, [r1, #12]
 80011cc:	e006      	b.n	80011dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011ce:	4b20      	ldr	r3, [pc, #128]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	491e      	ldr	r1, [pc, #120]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d006      	beq.n	80011f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011e8:	4b19      	ldr	r3, [pc, #100]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	4918      	ldr	r1, [pc, #96]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
 80011f4:	e006      	b.n	8001204 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011f6:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4914      	ldr	r1, [pc, #80]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001200:	4013      	ands	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d021      	beq.n	8001254 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001210:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	490e      	ldr	r1, [pc, #56]	@ (8001250 <HAL_GPIO_Init+0x2d0>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e021      	b.n	8001262 <HAL_GPIO_Init+0x2e2>
 800121e:	bf00      	nop
 8001220:	10320000 	.word	0x10320000
 8001224:	10310000 	.word	0x10310000
 8001228:	10220000 	.word	0x10220000
 800122c:	10210000 	.word	0x10210000
 8001230:	10120000 	.word	0x10120000
 8001234:	10110000 	.word	0x10110000
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000
 8001240:	40010800 	.word	0x40010800
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
 800124c:	40011400 	.word	0x40011400
 8001250:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <HAL_GPIO_Init+0x304>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	43db      	mvns	r3, r3
 800125c:	4909      	ldr	r1, [pc, #36]	@ (8001284 <HAL_GPIO_Init+0x304>)
 800125e:	4013      	ands	r3, r2
 8001260:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	3301      	adds	r3, #1
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126e:	fa22 f303 	lsr.w	r3, r2, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	f47f ae8e 	bne.w	8000f94 <HAL_GPIO_Init+0x14>
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	372c      	adds	r7, #44	@ 0x2c
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	40010400 	.word	0x40010400

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	611a      	str	r2, [r3, #16]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr

080012b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	460b      	mov	r3, r1
 80012c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012ca:	887a      	ldrh	r2, [r7, #2]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43d9      	mvns	r1, r3
 80012d6:	887b      	ldrh	r3, [r7, #2]
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	611a      	str	r2, [r3, #16]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e272      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8087 	beq.w	800141a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800130c:	4b92      	ldr	r3, [pc, #584]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	2b04      	cmp	r3, #4
 8001316:	d00c      	beq.n	8001332 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001318:	4b8f      	ldr	r3, [pc, #572]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 030c 	and.w	r3, r3, #12
 8001320:	2b08      	cmp	r3, #8
 8001322:	d112      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
 8001324:	4b8c      	ldr	r3, [pc, #560]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800132c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001330:	d10b      	bne.n	800134a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001332:	4b89      	ldr	r3, [pc, #548]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d06c      	beq.n	8001418 <HAL_RCC_OscConfig+0x12c>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d168      	bne.n	8001418 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e24c      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001352:	d106      	bne.n	8001362 <HAL_RCC_OscConfig+0x76>
 8001354:	4b80      	ldr	r3, [pc, #512]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a7f      	ldr	r2, [pc, #508]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800135a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e02e      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x98>
 800136a:	4b7b      	ldr	r3, [pc, #492]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a7a      	ldr	r2, [pc, #488]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b78      	ldr	r3, [pc, #480]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a77      	ldr	r2, [pc, #476]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001380:	6013      	str	r3, [r2, #0]
 8001382:	e01d      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800138c:	d10c      	bne.n	80013a8 <HAL_RCC_OscConfig+0xbc>
 800138e:	4b72      	ldr	r3, [pc, #456]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a71      	ldr	r2, [pc, #452]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	4b6f      	ldr	r3, [pc, #444]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a6e      	ldr	r2, [pc, #440]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e00b      	b.n	80013c0 <HAL_RCC_OscConfig+0xd4>
 80013a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a6a      	ldr	r2, [pc, #424]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	4b68      	ldr	r3, [pc, #416]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a67      	ldr	r2, [pc, #412]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fbec 	bl	8000ba4 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbe8 	bl	8000ba4 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	@ 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e200      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe4>
 80013ee:	e014      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f0:	f7ff fbd8 	bl	8000ba4 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013f8:	f7ff fbd4 	bl	8000ba4 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b64      	cmp	r3, #100	@ 0x64
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e1ec      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800140a:	4b53      	ldr	r3, [pc, #332]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x10c>
 8001416:	e000      	b.n	800141a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0302 	and.w	r3, r3, #2
 8001422:	2b00      	cmp	r3, #0
 8001424:	d063      	beq.n	80014ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001426:	4b4c      	ldr	r3, [pc, #304]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d00b      	beq.n	800144a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001432:	4b49      	ldr	r3, [pc, #292]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f003 030c 	and.w	r3, r3, #12
 800143a:	2b08      	cmp	r3, #8
 800143c:	d11c      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
 800143e:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d116      	bne.n	8001478 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144a:	4b43      	ldr	r3, [pc, #268]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d005      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	691b      	ldr	r3, [r3, #16]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d001      	beq.n	8001462 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1c0      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001462:	4b3d      	ldr	r3, [pc, #244]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	4939      	ldr	r1, [pc, #228]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001472:	4313      	orrs	r3, r2
 8001474:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	e03a      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d020      	beq.n	80014c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001480:	4b36      	ldr	r3, [pc, #216]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001486:	f7ff fb8d 	bl	8000ba4 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800148c:	e008      	b.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800148e:	f7ff fb89 	bl	8000ba4 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	2b02      	cmp	r3, #2
 800149a:	d901      	bls.n	80014a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800149c:	2303      	movs	r3, #3
 800149e:	e1a1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0f0      	beq.n	800148e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	695b      	ldr	r3, [r3, #20]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4927      	ldr	r1, [pc, #156]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	e015      	b.n	80014ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	@ (800155c <HAL_RCC_OscConfig+0x270>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c8:	f7ff fb6c 	bl	8000ba4 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fb68 	bl	8000ba4 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e180      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03a      	beq.n	8001570 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d019      	beq.n	8001536 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001502:	4b17      	ldr	r3, [pc, #92]	@ (8001560 <HAL_RCC_OscConfig+0x274>)
 8001504:	2201      	movs	r2, #1
 8001506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001508:	f7ff fb4c 	bl	8000ba4 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001510:	f7ff fb48 	bl	8000ba4 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e160      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <HAL_RCC_OscConfig+0x26c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d0f0      	beq.n	8001510 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f000 face 	bl	8001ad0 <RCC_Delay>
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_RCC_OscConfig+0x274>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153c:	f7ff fb32 	bl	8000ba4 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001542:	e00f      	b.n	8001564 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001544:	f7ff fb2e 	bl	8000ba4 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d908      	bls.n	8001564 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e146      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	42420000 	.word	0x42420000
 8001560:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001564:	4b92      	ldr	r3, [pc, #584]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d1e9      	bne.n	8001544 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	f000 80a6 	beq.w	80016ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001582:	4b8b      	ldr	r3, [pc, #556]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10d      	bne.n	80015aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b88      	ldr	r3, [pc, #544]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	4a87      	ldr	r2, [pc, #540]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001598:	61d3      	str	r3, [r2, #28]
 800159a:	4b85      	ldr	r3, [pc, #532]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015a6:	2301      	movs	r3, #1
 80015a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015aa:	4b82      	ldr	r3, [pc, #520]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d118      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015b6:	4b7f      	ldr	r3, [pc, #508]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a7e      	ldr	r2, [pc, #504]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015c2:	f7ff faef 	bl	8000ba4 <HAL_GetTick>
 80015c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ca:	f7ff faeb 	bl	8000ba4 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b64      	cmp	r3, #100	@ 0x64
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e103      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	4b75      	ldr	r3, [pc, #468]	@ (80017b4 <HAL_RCC_OscConfig+0x4c8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d106      	bne.n	80015fe <HAL_RCC_OscConfig+0x312>
 80015f0:	4b6f      	ldr	r3, [pc, #444]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a6e      	ldr	r2, [pc, #440]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	f043 0301 	orr.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	e02d      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d10c      	bne.n	8001620 <HAL_RCC_OscConfig+0x334>
 8001606:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4a69      	ldr	r2, [pc, #420]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800160c:	f023 0301 	bic.w	r3, r3, #1
 8001610:	6213      	str	r3, [r2, #32]
 8001612:	4b67      	ldr	r3, [pc, #412]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a66      	ldr	r2, [pc, #408]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f023 0304 	bic.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	e01c      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b05      	cmp	r3, #5
 8001626:	d10c      	bne.n	8001642 <HAL_RCC_OscConfig+0x356>
 8001628:	4b61      	ldr	r3, [pc, #388]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a60      	ldr	r2, [pc, #384]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	4b5e      	ldr	r3, [pc, #376]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a5d      	ldr	r2, [pc, #372]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6213      	str	r3, [r2, #32]
 8001640:	e00b      	b.n	800165a <HAL_RCC_OscConfig+0x36e>
 8001642:	4b5b      	ldr	r3, [pc, #364]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	6a1b      	ldr	r3, [r3, #32]
 8001646:	4a5a      	ldr	r2, [pc, #360]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	f023 0301 	bic.w	r3, r3, #1
 800164c:	6213      	str	r3, [r2, #32]
 800164e:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	4a57      	ldr	r2, [pc, #348]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	f023 0304 	bic.w	r3, r3, #4
 8001658:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d015      	beq.n	800168e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001662:	f7ff fa9f 	bl	8000ba4 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001668:	e00a      	b.n	8001680 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800166a:	f7ff fa9b 	bl	8000ba4 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001678:	4293      	cmp	r3, r2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e0b1      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001680:	4b4b      	ldr	r3, [pc, #300]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d0ee      	beq.n	800166a <HAL_RCC_OscConfig+0x37e>
 800168c:	e014      	b.n	80016b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168e:	f7ff fa89 	bl	8000ba4 <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001696:	f7ff fa85 	bl	8000ba4 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e09b      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ac:	4b40      	ldr	r3, [pc, #256]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1ee      	bne.n	8001696 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b8:	7dfb      	ldrb	r3, [r7, #23]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d105      	bne.n	80016ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a3b      	ldr	r2, [pc, #236]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	f000 8087 	beq.w	80017e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 030c 	and.w	r3, r3, #12
 80016dc:	2b08      	cmp	r3, #8
 80016de:	d061      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d146      	bne.n	8001776 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b33      	ldr	r3, [pc, #204]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa59 	bl	8000ba4 <HAL_GetTick>
 80016f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f4:	e008      	b.n	8001708 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f6:	f7ff fa55 	bl	8000ba4 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b02      	cmp	r3, #2
 8001702:	d901      	bls.n	8001708 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e06d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d1f0      	bne.n	80016f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800171c:	d108      	bne.n	8001730 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800171e:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	4921      	ldr	r1, [pc, #132]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	4313      	orrs	r3, r2
 800172e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001730:	4b1f      	ldr	r3, [pc, #124]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a19      	ldr	r1, [r3, #32]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	430b      	orrs	r3, r1
 8001742:	491b      	ldr	r1, [pc, #108]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	4313      	orrs	r3, r2
 8001746:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fa29 	bl	8000ba4 <HAL_GetTick>
 8001752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001756:	f7ff fa25 	bl	8000ba4 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001768:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0f0      	beq.n	8001756 <HAL_RCC_OscConfig+0x46a>
 8001774:	e035      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001776:	4b10      	ldr	r3, [pc, #64]	@ (80017b8 <HAL_RCC_OscConfig+0x4cc>)
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177c:	f7ff fa12 	bl	8000ba4 <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff fa0e 	bl	8000ba4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e026      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d1f0      	bne.n	8001784 <HAL_RCC_OscConfig+0x498>
 80017a2:	e01e      	b.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e019      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40007000 	.word	0x40007000
 80017b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017bc:	4b0b      	ldr	r3, [pc, #44]	@ (80017ec <HAL_RCC_OscConfig+0x500>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6a1b      	ldr	r3, [r3, #32]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d106      	bne.n	80017de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017da:	429a      	cmp	r2, r3
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e000      	b.n	80017e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40021000 	.word	0x40021000

080017f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d101      	bne.n	8001804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e0d0      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001804:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	683a      	ldr	r2, [r7, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d910      	bls.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001812:	4b67      	ldr	r3, [pc, #412]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f023 0207 	bic.w	r2, r3, #7
 800181a:	4965      	ldr	r1, [pc, #404]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	4313      	orrs	r3, r2
 8001820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001822:	4b63      	ldr	r3, [pc, #396]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0b8      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d020      	beq.n	8001882 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800184c:	4b59      	ldr	r3, [pc, #356]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	4a58      	ldr	r2, [pc, #352]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001856:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0308 	and.w	r3, r3, #8
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001864:	4b53      	ldr	r3, [pc, #332]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	4a52      	ldr	r2, [pc, #328]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800186a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800186e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001870:	4b50      	ldr	r3, [pc, #320]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	494d      	ldr	r1, [pc, #308]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800187e:	4313      	orrs	r3, r2
 8001880:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d040      	beq.n	8001910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	4b47      	ldr	r3, [pc, #284]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e07f      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ae:	4b41      	ldr	r3, [pc, #260]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e073      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018be:	4b3d      	ldr	r3, [pc, #244]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e06b      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b39      	ldr	r3, [pc, #228]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4936      	ldr	r1, [pc, #216]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e0:	f7ff f960 	bl	8000ba4 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f95c 	bl	8000ba4 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e053      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b2d      	ldr	r3, [pc, #180]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d210      	bcs.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0207 	bic.w	r2, r3, #7
 8001926:	4922      	ldr	r1, [pc, #136]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	4313      	orrs	r3, r2
 800192c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	683a      	ldr	r2, [r7, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	d001      	beq.n	8001940 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e032      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d008      	beq.n	800195e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800194c:	4b19      	ldr	r3, [pc, #100]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	d009      	beq.n	800197e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800196a:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	490e      	ldr	r1, [pc, #56]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 800197a:	4313      	orrs	r3, r2
 800197c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800197e:	f000 f821 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001982:	4602      	mov	r2, r0
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	091b      	lsrs	r3, r3, #4
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	490a      	ldr	r1, [pc, #40]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c8>)
 8001990:	5ccb      	ldrb	r3, [r1, r3]
 8001992:	fa22 f303 	lsr.w	r3, r2, r3
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_RCC_ClockConfig+0x1cc>)
 8001998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800199a:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <HAL_RCC_ClockConfig+0x1d0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f8be 	bl	8000b20 <HAL_InitTick>

  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	0800269c 	.word	0x0800269c
 80019bc:	20000110 	.word	0x20000110
 80019c0:	20000114 	.word	0x20000114

080019c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b087      	sub	sp, #28
 80019c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
 80019d2:	2300      	movs	r3, #0
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019de:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b04      	cmp	r3, #4
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x30>
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x36>
 80019f2:	e027      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 80019f6:	613b      	str	r3, [r7, #16]
      break;
 80019f8:	e027      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	0c9b      	lsrs	r3, r3, #18
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	4a17      	ldr	r2, [pc, #92]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a04:	5cd3      	ldrb	r3, [r2, r3]
 8001a06:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a12:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0c5b      	lsrs	r3, r3, #17
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	4a11      	ldr	r2, [pc, #68]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a26:	fb03 f202 	mul.w	r2, r3, r2
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	e004      	b.n	8001a3e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	613b      	str	r3, [r7, #16]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b05      	ldr	r3, [pc, #20]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bc80      	pop	{r7}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	007a1200 	.word	0x007a1200
 8001a60:	080026b4 	.word	0x080026b4
 8001a64:	080026c4 	.word	0x080026c4
 8001a68:	003d0900 	.word	0x003d0900

08001a6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a70:	4b02      	ldr	r3, [pc, #8]	@ (8001a7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a72:	681b      	ldr	r3, [r3, #0]
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000110 	.word	0x20000110

08001a80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a84:	f7ff fff2 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	0a1b      	lsrs	r3, r3, #8
 8001a90:	f003 0307 	and.w	r3, r3, #7
 8001a94:	4903      	ldr	r1, [pc, #12]	@ (8001aa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a96:	5ccb      	ldrb	r3, [r1, r3]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	080026ac 	.word	0x080026ac

08001aa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001aac:	f7ff ffde 	bl	8001a6c <HAL_RCC_GetHCLKFreq>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	0adb      	lsrs	r3, r3, #11
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	4903      	ldr	r1, [pc, #12]	@ (8001acc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001abe:	5ccb      	ldrb	r3, [r1, r3]
 8001ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	080026ac 	.word	0x080026ac

08001ad0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <RCC_Delay+0x34>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0a      	ldr	r2, [pc, #40]	@ (8001b08 <RCC_Delay+0x38>)
 8001ade:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae2:	0a5b      	lsrs	r3, r3, #9
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	fb02 f303 	mul.w	r3, r2, r3
 8001aea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aec:	bf00      	nop
  }
  while (Delay --);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1e5a      	subs	r2, r3, #1
 8001af2:	60fa      	str	r2, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f9      	bne.n	8001aec <RCC_Delay+0x1c>
}
 8001af8:	bf00      	nop
 8001afa:	bf00      	nop
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	20000110 	.word	0x20000110
 8001b08:	10624dd3 	.word	0x10624dd3

08001b0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e042      	b.n	8001ba4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d106      	bne.n	8001b38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f7fe ff64 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2224      	movs	r2, #36	@ 0x24
 8001b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68da      	ldr	r2, [r3, #12]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fcd5 	bl	8002500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001b64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001b74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001b84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b20      	cmp	r3, #32
 8001bc4:	d112      	bne.n	8001bec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d002      	beq.n	8001bd2 <HAL_UART_Receive_IT+0x26>
 8001bcc:	88fb      	ldrh	r3, [r7, #6]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00b      	b.n	8001bee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68b9      	ldr	r1, [r7, #8]
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f000 fab7 	bl	8002156 <UART_Start_Receive_IT>
 8001be8:	4603      	mov	r3, r0
 8001bea:	e000      	b.n	8001bee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001bec:	2302      	movs	r3, #2
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0ba      	sub	sp, #232	@ 0xe8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d10f      	bne.n	8001c5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d009      	beq.n	8001c5e <HAL_UART_IRQHandler+0x66>
 8001c4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 fb93 	bl	8002382 <UART_Receive_IT>
      return;
 8001c5c:	e25b      	b.n	8002116 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 80de 	beq.w	8001e24 <HAL_UART_IRQHandler+0x22c>
 8001c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c6c:	f003 0301 	and.w	r3, r3, #1
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d106      	bne.n	8001c82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80d1 	beq.w	8001e24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_UART_IRQHandler+0xae>
 8001c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d005      	beq.n	8001ca6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001caa:	f003 0304 	and.w	r3, r3, #4
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d00b      	beq.n	8001cca <HAL_UART_IRQHandler+0xd2>
 8001cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f043 0202 	orr.w	r2, r3, #2
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <HAL_UART_IRQHandler+0xf6>
 8001cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d005      	beq.n	8001cee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce6:	f043 0204 	orr.w	r2, r3, #4
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d011      	beq.n	8001d1e <HAL_UART_IRQHandler+0x126>
 8001cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001cfe:	f003 0320 	and.w	r3, r3, #32
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d105      	bne.n	8001d12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d16:	f043 0208 	orr.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 81f2 	beq.w	800210c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d2c:	f003 0320 	and.w	r3, r3, #32
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d008      	beq.n	8001d46 <HAL_UART_IRQHandler+0x14e>
 8001d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d002      	beq.n	8001d46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	f000 fb1e 	bl	8002382 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf14      	ite	ne
 8001d54:	2301      	movne	r3, #1
 8001d56:	2300      	moveq	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d103      	bne.n	8001d72 <HAL_UART_IRQHandler+0x17a>
 8001d6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d04f      	beq.n	8001e12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 fa28 	bl	80021c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d041      	beq.n	8001e0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	3314      	adds	r3, #20
 8001d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001d94:	e853 3f00 	ldrex	r3, [r3]
 8001d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3314      	adds	r3, #20
 8001dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001db2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001db6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001dc2:	e841 2300 	strex	r3, r2, [r1]
 8001dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1d9      	bne.n	8001d86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d013      	beq.n	8001e02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dde:	4a7e      	ldr	r2, [pc, #504]	@ (8001fd8 <HAL_UART_IRQHandler+0x3e0>)
 8001de0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff f852 	bl	8000e90 <HAL_DMA_Abort_IT>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e00:	e00e      	b.n	8001e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f993 	bl	800212e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e08:	e00a      	b.n	8001e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f98f 	bl	800212e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e10:	e006      	b.n	8001e20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f000 f98b 	bl	800212e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e1e:	e175      	b.n	800210c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e20:	bf00      	nop
    return;
 8001e22:	e173      	b.n	800210c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	f040 814f 	bne.w	80020cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e32:	f003 0310 	and.w	r3, r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 8148 	beq.w	80020cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8141 	beq.w	80020cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f000 80b6 	beq.w	8001fdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f000 8145 	beq.w	8002110 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	f080 813e 	bcs.w	8002110 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b20      	cmp	r3, #32
 8001ea4:	f000 8088 	beq.w	8001fb8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	330c      	adds	r3, #12
 8001eae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001eb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001eb6:	e853 3f00 	ldrex	r3, [r3]
 8001eba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001ebe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ec2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ec6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	330c      	adds	r3, #12
 8001ed0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ed4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ed8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001edc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001ee0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ee4:	e841 2300 	strex	r3, r2, [r1]
 8001ee8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1d9      	bne.n	8001ea8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3314      	adds	r3, #20
 8001efa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001efc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001efe:	e853 3f00 	ldrex	r3, [r3]
 8001f02:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001f04:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	3314      	adds	r3, #20
 8001f14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f18:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f1e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f20:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f24:	e841 2300 	strex	r3, r2, [r1]
 8001f28:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1e1      	bne.n	8001ef4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	3314      	adds	r3, #20
 8001f36:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f38:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f3a:	e853 3f00 	ldrex	r3, [r3]
 8001f3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f46:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	3314      	adds	r3, #20
 8001f50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f54:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f56:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f58:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f5a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f5c:	e841 2300 	strex	r3, r2, [r1]
 8001f60:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f62:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1e3      	bne.n	8001f30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	330c      	adds	r3, #12
 8001f7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f80:	e853 3f00 	ldrex	r3, [r3]
 8001f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f88:	f023 0310 	bic.w	r3, r3, #16
 8001f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	330c      	adds	r3, #12
 8001f96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001f9a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001f9c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fa0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fa2:	e841 2300 	strex	r3, r2, [r1]
 8001fa6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1e3      	bne.n	8001f76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe ff31 	bl	8000e1a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4619      	mov	r1, r3
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8b6 	bl	8002140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fd4:	e09c      	b.n	8002110 <HAL_UART_IRQHandler+0x518>
 8001fd6:	bf00      	nop
 8001fd8:	0800228d 	.word	0x0800228d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 808e 	beq.w	8002114 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8001ff8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8089 	beq.w	8002114 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	330c      	adds	r3, #12
 8002008:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800200a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800200c:	e853 3f00 	ldrex	r3, [r3]
 8002010:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002018:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	330c      	adds	r3, #12
 8002022:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002026:	647a      	str	r2, [r7, #68]	@ 0x44
 8002028:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800202a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800202c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800202e:	e841 2300 	strex	r3, r2, [r1]
 8002032:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002034:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e3      	bne.n	8002002 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	3314      	adds	r3, #20
 8002040:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	e853 3f00 	ldrex	r3, [r3]
 8002048:	623b      	str	r3, [r7, #32]
   return(result);
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3314      	adds	r3, #20
 800205a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800205e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002060:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002064:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002066:	e841 2300 	strex	r3, r2, [r1]
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800206c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1e3      	bne.n	800203a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2220      	movs	r2, #32
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2200      	movs	r2, #0
 800207e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	330c      	adds	r3, #12
 8002086:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	e853 3f00 	ldrex	r3, [r3]
 800208e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f023 0310 	bic.w	r3, r3, #16
 8002096:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	330c      	adds	r3, #12
 80020a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80020a4:	61fa      	str	r2, [r7, #28]
 80020a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a8:	69b9      	ldr	r1, [r7, #24]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	e841 2300 	strex	r3, r2, [r1]
 80020b0:	617b      	str	r3, [r7, #20]
   return(result);
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1e3      	bne.n	8002080 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2202      	movs	r2, #2
 80020bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020c2:	4619      	mov	r1, r3
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f83b 	bl	8002140 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020ca:	e023      	b.n	8002114 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d009      	beq.n	80020ec <HAL_UART_IRQHandler+0x4f4>
 80020d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f8e5 	bl	80022b4 <UART_Transmit_IT>
    return;
 80020ea:	e014      	b.n	8002116 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00e      	beq.n	8002116 <HAL_UART_IRQHandler+0x51e>
 80020f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d008      	beq.n	8002116 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f924 	bl	8002352 <UART_EndTransmit_IT>
    return;
 800210a:	e004      	b.n	8002116 <HAL_UART_IRQHandler+0x51e>
    return;
 800210c:	bf00      	nop
 800210e:	e002      	b.n	8002116 <HAL_UART_IRQHandler+0x51e>
      return;
 8002110:	bf00      	nop
 8002112:	e000      	b.n	8002116 <HAL_UART_IRQHandler+0x51e>
      return;
 8002114:	bf00      	nop
  }
}
 8002116:	37e8      	adds	r7, #232	@ 0xe8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	4613      	mov	r3, r2
 8002162:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	88fa      	ldrh	r2, [r7, #6]
 800216e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	88fa      	ldrh	r2, [r7, #6]
 8002174:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2222      	movs	r2, #34	@ 0x22
 8002180:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	691b      	ldr	r3, [r3, #16]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d007      	beq.n	800219c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68da      	ldr	r2, [r3, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800219a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	695a      	ldr	r2, [r3, #20]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f042 0201 	orr.w	r2, r2, #1
 80021aa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0220 	orr.w	r2, r2, #32
 80021ba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3714      	adds	r7, #20
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b095      	sub	sp, #84	@ 0x54
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	330c      	adds	r3, #12
 80021d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021da:	e853 3f00 	ldrex	r3, [r3]
 80021de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80021e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80021e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	330c      	adds	r3, #12
 80021ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80021f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80021f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80021f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80021f8:	e841 2300 	strex	r3, r2, [r1]
 80021fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80021fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1e5      	bne.n	80021d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3314      	adds	r3, #20
 800220a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800220c:	6a3b      	ldr	r3, [r7, #32]
 800220e:	e853 3f00 	ldrex	r3, [r3]
 8002212:	61fb      	str	r3, [r7, #28]
   return(result);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	3314      	adds	r3, #20
 8002222:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002224:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800222a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800222c:	e841 2300 	strex	r3, r2, [r1]
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e5      	bne.n	8002204 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223c:	2b01      	cmp	r3, #1
 800223e:	d119      	bne.n	8002274 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	330c      	adds	r3, #12
 8002246:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	e853 3f00 	ldrex	r3, [r3]
 800224e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f023 0310 	bic.w	r3, r3, #16
 8002256:	647b      	str	r3, [r7, #68]	@ 0x44
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	330c      	adds	r3, #12
 800225e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002260:	61ba      	str	r2, [r7, #24]
 8002262:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002264:	6979      	ldr	r1, [r7, #20]
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	e841 2300 	strex	r3, r2, [r1]
 800226c:	613b      	str	r3, [r7, #16]
   return(result);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1e5      	bne.n	8002240 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002282:	bf00      	nop
 8002284:	3754      	adds	r7, #84	@ 0x54
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr

0800228c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f7ff ff41 	bl	800212e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80022ac:	bf00      	nop
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b21      	cmp	r3, #33	@ 0x21
 80022c6:	d13e      	bne.n	8002346 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022d0:	d114      	bne.n	80022fc <UART_Transmit_IT+0x48>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d110      	bne.n	80022fc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022ee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a1b      	ldr	r3, [r3, #32]
 80022f4:	1c9a      	adds	r2, r3, #2
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	621a      	str	r2, [r3, #32]
 80022fa:	e008      	b.n	800230e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	1c59      	adds	r1, r3, #1
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6211      	str	r1, [r2, #32]
 8002306:	781a      	ldrb	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002312:	b29b      	uxth	r3, r3
 8002314:	3b01      	subs	r3, #1
 8002316:	b29b      	uxth	r3, r3
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4619      	mov	r1, r3
 800231c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10f      	bne.n	8002342 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68da      	ldr	r2, [r3, #12]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002330:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002340:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002346:	2302      	movs	r3, #2
  }
}
 8002348:	4618      	mov	r0, r3
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	bc80      	pop	{r7}
 8002350:	4770      	bx	lr

08002352 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002368:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff fed2 	bl	800211c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b08c      	sub	sp, #48	@ 0x30
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b22      	cmp	r3, #34	@ 0x22
 8002394:	f040 80ae 	bne.w	80024f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023a0:	d117      	bne.n	80023d2 <UART_Receive_IT+0x50>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d113      	bne.n	80023d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ca:	1c9a      	adds	r2, r3, #2
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80023d0:	e026      	b.n	8002420 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023e4:	d007      	beq.n	80023f6 <UART_Receive_IT+0x74>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <UART_Receive_IT+0x82>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d106      	bne.n	8002404 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e008      	b.n	8002416 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b2db      	uxtb	r3, r3
 800240c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002410:	b2da      	uxtb	r2, r3
 8002412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002414:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29b      	uxth	r3, r3
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	4619      	mov	r1, r3
 800242e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002430:	2b00      	cmp	r3, #0
 8002432:	d15d      	bne.n	80024f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 0220 	bic.w	r2, r2, #32
 8002442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	695a      	ldr	r2, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	2b01      	cmp	r3, #1
 8002478:	d135      	bne.n	80024e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	e853 3f00 	ldrex	r3, [r3]
 800248e:	613b      	str	r3, [r7, #16]
   return(result);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	f023 0310 	bic.w	r3, r3, #16
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	330c      	adds	r3, #12
 800249e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024a0:	623a      	str	r2, [r7, #32]
 80024a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a4:	69f9      	ldr	r1, [r7, #28]
 80024a6:	6a3a      	ldr	r2, [r7, #32]
 80024a8:	e841 2300 	strex	r3, r2, [r1]
 80024ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1e5      	bne.n	8002480 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b10      	cmp	r3, #16
 80024c0:	d10a      	bne.n	80024d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff fe2e 	bl	8002140 <HAL_UARTEx_RxEventCallback>
 80024e4:	e002      	b.n	80024ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7fd fe64 	bl	80001b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e002      	b.n	80024f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3730      	adds	r7, #48	@ 0x30
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
	...

08002500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	431a      	orrs	r2, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	695b      	ldr	r3, [r3, #20]
 800252c:	4313      	orrs	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800253a:	f023 030c 	bic.w	r3, r3, #12
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	430b      	orrs	r3, r1
 8002546:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699a      	ldr	r2, [r3, #24]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a2c      	ldr	r2, [pc, #176]	@ (8002614 <UART_SetConfig+0x114>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d103      	bne.n	8002570 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002568:	f7ff fa9e 	bl	8001aa8 <HAL_RCC_GetPCLK2Freq>
 800256c:	60f8      	str	r0, [r7, #12]
 800256e:	e002      	b.n	8002576 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002570:	f7ff fa86 	bl	8001a80 <HAL_RCC_GetPCLK1Freq>
 8002574:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4613      	mov	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	009a      	lsls	r2, r3, #2
 8002580:	441a      	add	r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	4a22      	ldr	r2, [pc, #136]	@ (8002618 <UART_SetConfig+0x118>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	095b      	lsrs	r3, r3, #5
 8002594:	0119      	lsls	r1, r3, #4
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	009a      	lsls	r2, r3, #2
 80025a0:	441a      	add	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002618 <UART_SetConfig+0x118>)
 80025ae:	fba3 0302 	umull	r0, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2064      	movs	r0, #100	@ 0x64
 80025b6:	fb00 f303 	mul.w	r3, r0, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3332      	adds	r3, #50	@ 0x32
 80025c0:	4a15      	ldr	r2, [pc, #84]	@ (8002618 <UART_SetConfig+0x118>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025cc:	4419      	add	r1, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	009a      	lsls	r2, r3, #2
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80025e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002618 <UART_SetConfig+0x118>)
 80025e6:	fba3 0302 	umull	r0, r3, r3, r2
 80025ea:	095b      	lsrs	r3, r3, #5
 80025ec:	2064      	movs	r0, #100	@ 0x64
 80025ee:	fb00 f303 	mul.w	r3, r0, r3
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	3332      	adds	r3, #50	@ 0x32
 80025f8:	4a07      	ldr	r2, [pc, #28]	@ (8002618 <UART_SetConfig+0x118>)
 80025fa:	fba2 2303 	umull	r2, r3, r2, r3
 80025fe:	095b      	lsrs	r3, r3, #5
 8002600:	f003 020f 	and.w	r2, r3, #15
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	440a      	add	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800260c:	bf00      	nop
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40013800 	.word	0x40013800
 8002618:	51eb851f 	.word	0x51eb851f

0800261c <memset>:
 800261c:	4603      	mov	r3, r0
 800261e:	4402      	add	r2, r0
 8002620:	4293      	cmp	r3, r2
 8002622:	d100      	bne.n	8002626 <memset+0xa>
 8002624:	4770      	bx	lr
 8002626:	f803 1b01 	strb.w	r1, [r3], #1
 800262a:	e7f9      	b.n	8002620 <memset+0x4>

0800262c <__libc_init_array>:
 800262c:	b570      	push	{r4, r5, r6, lr}
 800262e:	2600      	movs	r6, #0
 8002630:	4d0c      	ldr	r5, [pc, #48]	@ (8002664 <__libc_init_array+0x38>)
 8002632:	4c0d      	ldr	r4, [pc, #52]	@ (8002668 <__libc_init_array+0x3c>)
 8002634:	1b64      	subs	r4, r4, r5
 8002636:	10a4      	asrs	r4, r4, #2
 8002638:	42a6      	cmp	r6, r4
 800263a:	d109      	bne.n	8002650 <__libc_init_array+0x24>
 800263c:	f000 f81a 	bl	8002674 <_init>
 8002640:	2600      	movs	r6, #0
 8002642:	4d0a      	ldr	r5, [pc, #40]	@ (800266c <__libc_init_array+0x40>)
 8002644:	4c0a      	ldr	r4, [pc, #40]	@ (8002670 <__libc_init_array+0x44>)
 8002646:	1b64      	subs	r4, r4, r5
 8002648:	10a4      	asrs	r4, r4, #2
 800264a:	42a6      	cmp	r6, r4
 800264c:	d105      	bne.n	800265a <__libc_init_array+0x2e>
 800264e:	bd70      	pop	{r4, r5, r6, pc}
 8002650:	f855 3b04 	ldr.w	r3, [r5], #4
 8002654:	4798      	blx	r3
 8002656:	3601      	adds	r6, #1
 8002658:	e7ee      	b.n	8002638 <__libc_init_array+0xc>
 800265a:	f855 3b04 	ldr.w	r3, [r5], #4
 800265e:	4798      	blx	r3
 8002660:	3601      	adds	r6, #1
 8002662:	e7f2      	b.n	800264a <__libc_init_array+0x1e>
 8002664:	080026c8 	.word	0x080026c8
 8002668:	080026c8 	.word	0x080026c8
 800266c:	080026c8 	.word	0x080026c8
 8002670:	080026cc 	.word	0x080026cc

08002674 <_init>:
 8002674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002676:	bf00      	nop
 8002678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267a:	bc08      	pop	{r3}
 800267c:	469e      	mov	lr, r3
 800267e:	4770      	bx	lr

08002680 <_fini>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr
